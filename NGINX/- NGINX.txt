-> NGINX :
-High performance web server:
 used by over 50% of the top 1000 sites.
-Reverse proxy:
 SSL/TLS Termination
 Content caching and compression
-Load Balancer
________________________________ ____________________________________
-> HTTP:
 Stands for Hyper Text Transfer Protocol
 Application layer protocol built upon TCP/IP
 Defines the format for spending information btw web clients and web servers.
-> HTTPS:
 Stands for HyperText Transfer Protocol Secure
 Encrypted communication btw web clients and server using TLS/SSL
->URL- Uniform Resource Locater
 http://127.0.0.1:8000/users/1
 -Protocol: http- The application layer protocol to use
 -Hostname: 127.0.0.1- Dns domain name or server's IP address
 -Port: 8000 -The TCP port of the server listening for requests
 -Path and file name :/users/1 -Name and location of the requested resource
________________________________ _________________________________________
NGINX VS APACHE:
NGINX Configuration and Performance
Configuration Language:

NGINX uses a directive-based configuration language. This means that configuration settings are defined in a straightforward manner using a set of predefined directives within the NGINX configuration files (e.g., nginx.conf).

-One Processing Method:

NGINX generally uses an event-driven, asynchronous processing model( a model where tasks are executed independently of each other, allowing for parallel execution and the ability to continue processing without waiting for previous tasks to complete). This makes it more efficient at handling many concurrent connections, as it can process requests without waiting for each one to finish before moving to the next.

-Support for Dynamic, Third-Party Modules:

NGINX supports dynamic modules that can be loaded or unloaded at runtime. However, NGINX typically requires that third-party modules be compiled into the binary when building NGINX (unless you're using dynamic modules, which came in a later version). This is different from Apache, which allows modules to be loaded dynamically via configuration.

-Performance for Dynamic Content:

NGINX has similar performance for dynamic content as Apache in many scenarios. It uses a fast process for handling dynamic content but often relies on external backends (like PHP-FPM for PHP or other services) for generating dynamic content, which may affect performance depending on the backend.

-Faster for Static Files:

NGINX is faster for serving static files due to its non-blocking, event-driven architecture( a program initiates an I/O operation and continues executing other tasks without waiting for the operation to complete.This allows the program to remain responsive and handle multiple tasks concurrently). It is optimized for efficiently handling high-volume static content, such as images, CSS, and JavaScript files.

-No Equivalent to .htaccess Files:

NGINX does not support .htaccess files. Apache’s .htaccess files allow directory-level configuration overrides, but NGINX has no direct equivalent. Instead, NGINX’s configuration files need to be modified directly. This can be seen as both a strength and a limitation:
Strength: Performance is better because there’s no overhead of checking for .htaccess files on each request.
Limitation: All configuration changes need to be made in the global NGINX configuration file, which means changes affect all users and require a reload of the NGINX service.
Apache Configuration and Performance
Configuration Language:

Apache uses a directive-based configuration language as well, with its primary configuration file being httpd.conf (and additional configuration files for specific modules or virtual hosts).

-Multiple Processing Methods:

Apache offers multiple processing methods (e.g., prefork, worker, and event modes) to handle client requests. This flexibility allows Apache to be tuned for different types of workloads, such as those requiring high concurrency or those needing compatibility with older software.

-Support for Dynamic, Third-Party Modules:

Apache also supports dynamic modules, which can be loaded at runtime without needing to recompile Apache. This is a strong feature of Apache, as you can easily add or remove functionality (e.g., mod_php, mod_ssl) without rebuilding the server.

-Performance for Dynamic Content:

Apache has similar performance for dynamic content as NGINX, but it can be less efficient in handling a large number of concurrent connections due to its process-based model (depending on which processing method is used).

-Slower for Serving Static Files:

Apache is slower than NGINX when serving static files. It’s generally less efficient at this task because it processes each request with separate threads or processes, which can incur overhead when serving a large number of static files.
Concept of .htaccess Files:

Apache has a .htaccess mechanism that allows users to define configurations on a per-directory basis. This means that each directory can have its own configuration file that overrides the global server settings. This is useful for shared hosting environments or when you need to allow local overrides of settings (like redirects or security rules) without needing access to the main server configuration files.
Pros:

Flexibility for user-based or directory-level configuration.
Easy for shared hosting environments to allow non-admin users to configure specific settings for their directories.
Cons:

Performance: Apache must check for .htaccess files on every request, which can add overhead, especially on high-traffic websites.
______________________________ _______________________________
->To install NGINX on ubuntu: "https://nginx.org/en/linux_packages.html"
 #sudo apt-get update -y && sudo apt-get upgrade -y
 #apt-cache show nginx (and make sure a stable version is there if installed) 
-Install the prerequisites:

#sudo apt install curl gnupg2 ca-certificates lsb-release ubuntu-keyring

-Import an official nginx signing key so apt could verify the packages authenticity. Fetch the key:

#curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \
    | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null
-Verify that the downloaded file contains the proper key:

  gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg

-The output should contain the full fingerprint
573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 as follows:

   pub   rsa2048 2011-08-19 [SC] [expires: 2027-05-24]
      573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62
   uid                      nginx signing key <signing-key@nginx.com>
-Note that the output can contain other keys used to sign the packages.

-To set up the apt repository for stable nginx packages, run the following command:

#echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
http://nginx.org/packages/ubuntu `lsb_release -cs` nginx" \
    | sudo tee /etc/apt/sources.list.d/nginx.list
-If you would like to use mainline nginx packages, run the following command instead:

#echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx" \
    | sudo tee /etc/apt/sources.list.d/nginx.list

-Set up repository pinning to prefer our packages over distribution-provided ones:

#echo -e "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n" \
    | sudo tee /etc/apt/preferences.d/99nginx

-To install nginx, run the following commands:

#sudo apt update
#sudo apt install nginx

_________________________________________ _______________________________
#cd /etc/nginx/conf.d/ ->default.conf  : here you can check the default config, for listen, server name, root directory, and error page.
#nano default.conf  : and change the config for default port
server {
    listen 80 default_server;
    server_name _ ;

  root   /usr/share/nginx/html;
}
#nano exapmle.com.conf : make another host file and root file for it.

  server {
   listen 80;
    server_name example.com www.example.com;
    root /var/www/example.com/html;
}

#mkdir -p /var/www/example.com/html   (a page for our nginx host file)
#echo "<h1>Hello, Example.com</h1>" > /var/www/example.com/html/index.html
#nginx -t
# curl localhost
#curl --header "Host: example.com" localhost
-If it gives any error then check it out.
#less /var/log/nginx/error.log
#semanage fcontext -l | grep /usr/share/nginx/html
 like i am unable to access local host because:
 system_u:object_r:httpd_sys_content_t:s0 is the selinux rule set for apache version for all hosting webpages, similar for our /usr/share/nginx/html(/.*)? 
#restorecon -R -v /var/www
