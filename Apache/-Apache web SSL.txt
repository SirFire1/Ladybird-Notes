->Apache web SSL
-Lab – Self Signed Certificate with openSSL
openssl genrsa -out server1.com.key 2048 
openssl rsa -in server1.com.key -out server1.com.key 
openssl req -sha256 -new -key server1.com.key -out server1.com.csr -subj '/CN=server1.com' 
openssl x509 -req -sha256 -days 365 -in server1.com.csr -signkey server1.com.key -out server1.com.crt
_________________________ ______________________________
->Lab – How to allow only some IP or network to access pages using mod_access_compat module – Yum Base

Directive provided by mod_access_compat module
<Directory> , <Files> and <Location>

1.Make sure mod_access_compat module is uncommented in configuration on server ( 192.168.31.200)
#grep mod_access_compact  /etc/httpd/conf.modules.d/00-base.conf
2.Create new directory access_testing under website directory
# mkdir /var/www/html/server3_website/access_testing
3.Create Index.html under this new directory
# cat > /var/www/html/server3_website/access_testing/index.html
  <h1> This is the access testing page on Server3.com using mod_access_compat module.  </h1>

4.Add access related configuration in /etc/httpd/conf.d/namebase.conf on 192.168.31.200 on server3.com Virtualhost
# vi /etc/httpd/conf.d/namebase.conf
   Alias /accesstest	/var/www/html/server3_website/access_testing/
  <Directory /var/www/html/server3_website/access_testing/ >
       Order Deny,allow
       Deny from all
      Allow from 192.168.31.146 192.168.31.0/24
</Directory>	

5.Restart httpd service and Test URL
#systemctl reload httpd
Browse for http://server3.com/accesstest
___________________________ ____________________________
->Lab – Stop directory browsing on Apache 
1.Make sure all core module is uncommented in configuration on server (192.168.31.200)
2.Locate server3.com website page directory and create subdirectory for put extra pages
# cd /var/www/html/server3_website
# mkdir /var/www/html/server3_website/browsedir

3.Create test.html under this new directory and create multiple copies of it
#cat > /var/www/html/server3_website/browsedir/test.html
  This is directory browsing testing file
# cp test.html test2.html 
# cp test.html test3.html
# cp test.html test4.html
# cp test.html test5.html
4.Add Redirect configuration in /etc/httpd/conf.d/namebase.conf on 192.168.31.200 on server3.com Virtualhost
# vi /etc/httpd/conf.d/namebase.conf
Alias /browsedir   /var/www/html/server3_website/browsedir/
<Directory /var/www/html/server3_website/browsedir/>
     Options -Indexes
    AllowOverride none
     Require all Granted
</Directory>

5.Browse the page
http://server3.com/browsedir/
_______________________________ _____________________________
->Lab – Deny access to specific sub-directories using DirectoryMatch directives
1.Make sure core modules is uncommented in configuration on server ( 192.168.31.200)
2.Create new directory directorymatchtesting under server3 website directory
# mkdir /var/www/html/server3_website/directorymatchtesting
3.Create subdirectories under “directorymatchtesting”
# mkdir -p /var/www/html/server3_website/directorymatchtesting/{Orland,singapur,tokyo,Delhi,Elan}
4.Add access related configuration in /etc/httpd/conf.d/namebase.conf on 192.168.31.200 on server3.com Virtualhost
# vi /etc/httpd/conf.d/namebase.conf
Alias /directorymatch /var/www/html/server3_website/directorymatchtesting
<Directory /var/www/html/server3_website/directorymatchtesting/>
     Options +Indexes
    AllowOverride none
     Require all Granted
</Directory>

<DirectoryMatch /[D,t].*>   (Delhi,tokyo will be not visible)
     Require all Denied
</DirectoryMatch>
5.Restart Apache and test Directory access
#systemctl restart httpd
http://server3.com/directorymatch
____________________________ ____________________________
->CGI Script:
 -CGI stands for common gateway interface which is a common way to run some program via Apache Web server.
 -This program could be written in C, C++ or Perl
 -CGI can execute any type of file on server platform 
 -Best example of CGI program is Nagios. Nagios is a well known infrastructure monitoring Tool which we can configure as CGI program using Apache Web server.
->How it works:            (Here server is Apache)
 Browser sends URL to CGI Program
 Server uses CGI to run Program
 CGI Program passes output to server
 Server passes HTML or other type of output back to the browser

->CGI script testing:
 -Can be found in /etc/httpd/conf
1.Find the section which reads
<Directory “/var/www/cgi-bin”>
   AllowOverride None
   Options None
   Require all granted
</Directory>
2.Add below line above “Require all granted”
Options +ExecCGI
AddHandler cgi-script .cgi .pl
3.Create index.cgi file under /var/www/cgi-bin
vi /var/www/cgi-bin/index.cgi
  #!/usr/bin/perl
  print "Content-type: text/html\n\n";
  print “This is CGI testing script on avminfi.com”   
4.Make sure index.cgi file should have execution permission
#chmod 755 var/www/cgi-bin/index.cgi
5.Test CGI script
Browse for https://apache.avminfi.com/cgi-bin/index.cgi
________________________ ________________________________
->Maintenance Page:
 -Every website need maintenance time
 -Professional companies prefer to notify client about the maintenance windows with their own custom pages in which they ask web developer to add their own client's company logo etc.
->How to display custom maintenance page:
 -File based method:
  Rewrite module's conditions and rule for checking file presence and display maintenance page on 503 error condition.
 -Service base method:
  Creating maintenance function loop in apache startup script.
_____________________ ________________ _________________
->Lab – How do I set Maintenance Page for website and activate it on-demand?
1.Make sure rewrite module is uncommented in configuration on server ( 192.168.31.200)
2.Create a separate directory “customerrors”
# mkdir /var/www/html/server4_website/customerrors
3.Create “maintenance.html” under above directory and add below content in it.
# cd /var/www/html/server4_website/customerrors
# vim maintenance.html
<html><h1> Dear User, Website is down for maintenance purpose. It will be up in next 1 hours. Sorry for inconvenience</h1></html>
4.Add access related configuration in /etc/httpd/conf.d/namebase.conf on 192.168.31.200 on server4.com Virtualhost
# vi /etc/httpd/conf.d/namebase.conf
#--Setting up maintenance page--
ErrorDocument 503 /customerrors/maintenance.html
RewriteEngine on
RewriteCond %{ENV:REDIRECT_STATUS} ^$
RewriteCond /var/www/html/server4_website/UP -f  (up if the file if present in this position, for real time maintenance)
RewriteCond %{REQUEST_URI} !=/customerrors/maintenance.html
RewriteRule ^ -   [R=503,L]
5.Restart Apache, create blank file “UP” and test maintenance page
#systemctl restart httpd
# touch /var/www/html/server4_website/UP
http://server4.com/
_______________________________ ____________________________
->Separate Domain hosting Conf:
1.Browse http://server1.com/extrapages and note down the page content.
2.Make sure mod_alias module is uncommented in configuration on server ( 192.168.31.200)
#grep -ir mod_alias /etc/httpd/conf.modules.d/00-base.

3.Add domain entry for extrapages.server1.com in /etc/hosts
#vi /etc/hosts
192.168.31.200	extrapages.server1.com

If you have windows system then update this value in C:\windows\system32\drivers\etc\hosts file
4.Check your existing current Alias configuration to know the pages location directory
# cat /etc/httpd/conf.d/namebase.conf | grep extrapages

5.Add new virtual host entry for extrapages.server1.com
# vi /etc/httpd/conf.d/namebase.conf
<VirtualHost *:80>
    	ServerAdmin admin@server1.com
    	DocumentRoot "/var/www/html/server1_website/aliastesting"
    	ServerName extrapages.server1.com
    	ErrorLog "logs/extrapages.server1_website-error_log"
	CustomLog "logs/extrapages.server1_website-access_log" common	
	</VirtualHost>

6.Restart Apache and test new URL
#systemctl restart httpd
_________________________________________
mod_ssl Module in Apache
The mod_ssl module is an Apache HTTP Server module that provides support for SSL (Secure Sockets Layer) and TLS (Transport Layer Security) protocols, which are used to encrypt communication between a web server and a client (usually a web browser).

The purpose of mod_ssl is to secure your web server by enabling SSL/TLS encryption, which ensures that the data exchanged between the client and the server remains confidential and cannot be tampered with. This is done by encrypting the data transmitted over the internet, making it difficult for malicious entities to eavesdrop or alter the data.

In modern practice, SSL has been mostly replaced by TLS (a more secure and updated version), but the term "SSL" is still widely used to refer to both protocols.

Purpose of mod_ssl:
Encryption:

mod_ssl enables encryption of data between the web server and clients. This prevents third parties from intercepting sensitive information, such as login credentials, credit card numbers, or other personal data, during transmission.
The data is encrypted with a public-private key pair, ensuring that only the intended recipient can decrypt it.
Authentication:

SSL/TLS certificates verify the identity of a website, ensuring that the client is communicating with the intended server and not an imposter.
By using a certificate issued by a trusted Certificate Authority (CA), users can trust that they are connecting to a legitimate website.
Integrity:

SSL/TLS ensures that the data sent between the client and the server is not modified in transit. It does this by using hash functions and digital signatures to check for any tampering with the data.
Enabling HTTPS:

With mod_ssl, you can serve your website over HTTPS (HyperText Transfer Protocol Secure) instead of the standard HTTP. HTTPS encrypts the HTTP traffic and uses SSL/TLS to secure the connection. HTTPS is what users expect when they visit secure websites, such as online banking, email services, and e-commerce platforms.
Protection Against Various Attacks:

SSL/TLS encryption protects against attacks like Man-in-the-Middle (MITM) attacks, where a malicious actor intercepts and potentially alters the communication between the server and the client.
It also prevents eavesdropping on sensitive information, providing a secure channel for communication.
How It Works:
When a client (web browser) tries to connect to a server over HTTPS, the following process typically occurs:

SSL/TLS Handshake:

The client connects to the server and requests a secure connection.
The server responds with its SSL certificate, which includes the server’s public key.
The client verifies the certificate by checking if it is signed by a trusted Certificate Authority (CA).
The client generates a pre-master secret and encrypts it with the server’s public key, sending it back to the server.
The server decrypts the pre-master secret using its private key, and both parties generate the same session key for encrypting the data during the session.
Encrypted Communication:

After the handshake, the data transmitted between the client and server is encrypted using the session key.
The encryption ensures that even if someone intercepts the data, they will not be able to read or alter it.
Session Termination:

Once the communication is complete, the session is terminated, and the session key is discarded.