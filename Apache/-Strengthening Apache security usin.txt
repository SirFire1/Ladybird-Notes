->Strengthening Apache security using ModSecurity with OWASP Core Rules:
 -ModSecurity module is like web application firewall which come with some standard Rule sets through which administrator can detect instruction at some level.
 -OWASP Rule Sets is a set of generic attack detection rules for use with ModSecurity or other web application firewalls.
 -These CRS (core rule sets) protect your web application from wide range of attacks which are happening widely in all domain areas now a day.

->Common Attack Categories:
-SQL Injection (SQLi): A type of attack where malicious SQL statements are inserted into an input field, allowing attackers to manipulate a database. It can be used to retrieve sensitive data, bypass authentication, or modify data.

-Cross-Site Scripting (XSS): A vulnerability where attackers inject malicious scripts into webpages viewed by other users. This allows them to steal cookies, session tokens, or execute arbitrary JavaScript in the user's browser.

-Metadata/Error Leakages: Exposing detailed error messages or metadata in response to failed requests can provide attackers with valuable information about the server, application, or database structure, which can be used to craft more precise attacks.

-Unix/Windows Shell Injection: This involves injecting operating system commands into an application that interacts with the shell. Attackers may use this to execute arbitrary commands on the underlying OS, leading to privilege escalation, system compromise, or data manipulation.

-Scripting/Scanner/Bot: Automated tools (scanners/bots) that search for vulnerabilities like SQLi, XSS, or others in web applications. These scripts can be used both for legitimate security testing or malicious attacks.

-Detection: Refers to identifying potential vulnerabilities or attacks (such as SQLi or XSS) using techniques like anomaly detection, log analysis, and intrusion detection systems (IDS). This helps organizations defend against exploitation.

-Session Fixation: An attack where an attacker sets a user's session ID before the user logs in, tricking the application into accepting the attacker's session as the user's, leading to session hijacking.

-Shellshock: A vulnerability in the Bash shell (common in Unix/Linux systems) where attackers can execute arbitrary commands by passing malicious environment variables to the shell. This can result in remote code execution.

-HTTP Proxy: An intermediary server between a client and a web server that can be exploited to intercept or manipulate traffic (for sniffing, MITM attacks, or injecting malicious content).

-Java Code Injection: This occurs when an attacker injects malicious Java code into an application. It can allow the attacker to execute arbitrary code on the server, potentially compromising the system.

-PHP Code Injection: Similar to Java code injection, but in PHP-based applications. It allows attackers to inject PHP code, which can then be executed on the server, potentially compromising the system.

-Remote File Inclusion (RFI): An attack where an attacker includes a remote file (often malicious) in an application through user input. This can allow remote code execution if the server does not properly sanitize input.

-Local File Inclusion (LFI): This is similar to RFI, but instead of including a remote file, the attacker tricks the application into including a local file, which could be sensitive configuration files, logs, or other files on the system
 ________________________________________ _____________________________
->Steps to install mod_security module
Ø Install Dependencies
# yum install httpd-devel
# yum install pcre-devel
# yum install libxml2-devel
Ø Download mod_security Tarball
# cd /opt
# wget --no-check-certificate https://www.modsecurity.org/tarball/2.9.3/modsecurity-2.9.3.tar.gz
# tar -zxvf modsecurity-2.9.3.tar.gz
# cd modsecurity-2.9.3
Ø Compile tar ball and install
# ./configure --with-apxs=/usr/bin/apxs --with-apr=/usr/bin/apr-1-config --with-pcre=/usr/bin/pcre-config
# make
# make install
Ø Verify if .SO file is generated in modules directory
ls -al /etc/httpd/modules/mod_security2.so
____________________________________ ____________________________________
-> Installing of OWASP Core rules set:
# cd /etc/httpd/
# wget https://github.com/coreruleset/coreruleset/archive/v3.3.0.tar.gz
# tar -xvzf v3.3.0.tar.gz
# ln -s coreruleset-3.3.0 /etc/httpd/crs
# cp /etc/httpd/crs/crs-setup.conf.example /etc/httpd/crs/crs-setup.conf
# rm v3.3.0.tar.gz
-Close look at CRS folder
# ls –al /etc/httpd/crs/*.conf
__________________________________ __________________________________
->Extended Log format for ModSecurity:
 Types:
 %[GEOIP_COUNTRY_CODE]:

This is a custom log variable that pulls the country code based on the client's IP address using a GeoIP database (for example, using MaxMind’s GeoIP). It typically returns a two-letter country code like "US" for the United States, "FR" for France, etc.
To use this, you’d need a system or service (like GeoIP) to resolve the IP to a geographic location.
----------------
[%[%Y-%m-%d %H:%M:%S]t.%[usec_frac]t]:

Timestamp: This logs the exact time of the request in a human-readable format (e.g., 2025-02-03 14:23:11), followed by microseconds (e.g., .345678).
%Y-%m-%d %H:%M:%S: Year-Month-Day Hour:Minute:Second format.
%usec_frac: This is used to capture fractional microseconds in some log formats (if your system supports it).
---------------------
%[Content-Type]:

This logs the Content-Type of the response sent by the server, such as text/html, application/json, image/png, etc. This is useful to identify the type of content being returned in the response.
----------------------------
%[remote]:

This variable logs the remote client IP address (the IP address from which the request originated).
Example: 192.168.1.100.
-------------------------
%v:

This logs the virtual host or server name that handled the request. This is useful when you have multiple domains or virtual hosts on the same server.
Example: example.com.
--------------------------
%A:

This represents the local IP address of the server that processed the request. If you’re using a load balancer or have multiple internal servers, this can indicate which backend server handled the request.
Example: 192.168.0.1.
-------------------------
%p:

This logs the port number on which the request was received.
For HTTP traffic, it will usually be port 80; for HTTPS, it will typically be port 443.
-------------------------
%R:

This logs the referrer URL (i.e., the page that led to the request). It's the value from the Referer HTTP header. If the referrer is not provided, this could be empty.
Example: https://example.com/page1
--------------------------------
%[BALANCER_wORKER_ROUTE]e:

This variable logs the worker route of the mod_proxy_balancer in Apache. This is useful in environments where load balancing is used, and it identifies which backend server or worker handled the request.
Example: If using load balancing, this might log the name of the backend server (e.g., worker1, worker2).
---------------------------------
%x:

This refers to the X-Forwarded-For header, which is commonly used in reverse proxy setups (like load balancers or CDN services). It logs the original client IP address if the server is behind a proxy.
Example: 192.168.1.100 (original client IP, if forwarded by a proxy).
--------------------
%[cookie]n:

This refers to a cookie that is sent in the request. %[cookie]n can log the value of a specific cookie (replace n with the cookie name, e.g., %[cookie]user_id to log the user_id cookie).
Example: %[cookie]user_id might log 12345 if the client sends a cookie named user_id=12345.
--------------------------
%[SSL_PROTOCOL]X:

This logs the SSL/TLS protocol version used during the HTTPS handshake. It is useful for identifying which version of SSL/TLS the client used to connect (e.g., TLSv1.2, TLSv1.3).
Example: TLSv1.2.
-----------------------------
%[SSL_CIPHER]x:

This logs the SSL cipher suite used for the HTTPS connection. The cipher suite determines how the communication is encrypted.
Example: ECDHE-RSA-AES128-GCM-SHA256.
----------------------------
%I:

This variable logs the size of the request body (i.e., how many bytes were sent in the body of the HTTP request, for POST or PUT requests). If no body is sent (like for GET requests), this might log 0.
Example: 1024 (the request body size in bytes).
----------------------------
%O:

This variable logs the size of the response body (i.e., how many bytes were sent in the HTTP response). Similar to %I, this indicates how large the content returned was.
Example: 2048 (the response body size in bytes).
----------------------------
%[ratio]n:

This refers to the ratio of request/response sizes. It's typically used to log the relationship between the input and output sizes.
Example: If the request size is 500 bytes and the response size is 1000 bytes, %[ratio]n might log 2.0 (response is twice the size of the request).
-----------------------
%D:
The %D variable in web server logging, particularly in Apache, is used to log the time taken to serve the request in microseconds. It's a useful metric for monitoring performance and identifying potential bottlenecks in your server's response time.
_______________________________________ ____________________________________
ModSecurity is a powerful open-source web application firewall (WAF) designed to protect web applications from various types of attacks, such as SQL Injection, Cross-Site Scripting (XSS), and other common vulnerabilities. It works by inspecting incoming traffic, applying rules, and blocking malicious requests.

Key ModSecurity Modules and Their Directives
Here’s a breakdown of the core ModSecurity modules and some of the key directives used for configuration and operation:

1. mod_security (Core ModSecurity Module)
The mod_security module is the main module that provides the fundamental WAF functionality for web servers like Apache. It is responsible for loading the configuration files, parsing rules, and enforcing security policies.

Key Directives:
SecRuleEngine:

Controls whether ModSecurity is active. It can be set to On, Off, or DetectionOnly (where ModSecurity logs but doesn't block traffic).
Example:
SecRuleEngine On
SecRule:

Defines a security rule to inspect and act upon HTTP requests. It uses a combination of operators and variables to identify attack patterns.
Example:
SecRule REQUEST_METHOD "POST" "id:1000,phase:1,deny,status:403"
SecAction:

Defines an action to take based on certain conditions. It can be used to set variables, log events, or return responses.
Example:
SecAction "id:2000,phase:1,pass,setvar:tx.some_var=1"
SecRequestBodyAccess:

Controls whether ModSecurity inspects the request body (for POST data, file uploads, etc.).
Example:
SecRequestBodyAccess On
SecResponseBodyAccess:

Controls whether ModSecurity inspects the response body. It's often used for detecting reflected XSS.
Example:
SecResponseBodyAccess On
SecAuditEngine:

Enables or disables audit logging, which records detailed information about the requests.
Example:
SecAuditEngine On
SecAuditLog:

Specifies the location of the audit log.
Example:
SecAuditLog /var/log/modsec_audit.log
2. mod_security2 (ModSecurity v2.x module for Apache)
This is the version of ModSecurity that is commonly used with Apache, providing the rule-based filtering and logging capabilities.

Key Directives:
SecDefaultAction:

Defines the default action that ModSecurity takes when a rule is triggered.
Example:
SecDefaultAction "phase:2,deny,log,status:403"
SecRuleEngine:

Controls the operational mode of ModSecurity: On, Off, or DetectionOnly.
Example:
SecRuleEngine DetectionOnly
SecAction:

Defines custom actions or behavior for the request/response.
Example:
SecAction "id:9000,phase:1,pass,setvar:tx.injection_flag=1"
SecRule:

Defines rules to identify and block malicious requests based on a variety of conditions and operators.
Example:
SecRule REQUEST_URI "@contains evil" "id:1001,deny,status:400"
SecRequestBodyLimit:

Defines the maximum size of the request body that ModSecurity will inspect.
Example:
SecRequestBodyLimit 13107200  # 12 MB
SecRuleRemoveById:

Removes specific rules by their ID from being processed.
Example:
SecRuleRemoveById 981176
3. mod_sec_http (HTTP-specific ModSecurity directives)
This module provides directives related to HTTP requests and responses, such as rules for HTTP headers, methods, and body data.

Key Directives:
SecHttpRequestBodyLimit:

Limits the size of the HTTP request body that ModSecurity will inspect.
Example:
SecHttpRequestBodyLimit 10485760  # 10 MB
SecHTTPResponseBodyLimit:

Limits the size of the HTTP response body that ModSecurity will inspect.
Example:
SecHTTPResponseBodyLimit 5242880  # 5 MB
SecRuleRemoveById:

This directive can be used to disable rules based on their IDs.
Example:
SecRuleRemoveById 981176
4. mod_security_crs (Core Rule Set for ModSecurity)
The Core Rule Set (CRS) is a set of generic security rules for ModSecurity that helps to defend against a broad range of web application attacks, including SQL Injection, Cross-Site Scripting (XSS), and others.

Key Directives (from CRS):
SecRuleEngine:

It can be set to On, Off, or DetectionOnly to control the rule engine's operational mode.
Example:
SecRuleEngine On
SecRequestBodyAccess:

This directive controls whether the body of the request should be examined.
Example:
SecRequestBodyAccess On
SecResponseBodyAccess:

This directive controls whether the response body is analyzed.
Example:
SecResponseBodyAccess On
5. mod_security_log (ModSecurity Logging Directives)
This module handles logging-related directives in ModSecurity, such as where logs are written and the level of detail captured in the logs.

Key Directives:
SecAuditLog:

Specifies the location where ModSecurity logs detailed information about requests and responses.
Example:
SecAuditLog /var/log/modsec_audit.log
SecAuditLogParts:

Specifies which parts of the request/response to log.
Example:
SecAuditLogParts ABIJDEFHZ
SecDebugLog:

Enables detailed debugging logs for ModSecurity.
Example:
SecDebugLog /var/log/modsec_debug.log
SecDebugLogLevel:

Controls the level of detail for the debug logs.
Example:
SecDebugLogLevel 3
Key Rule Set Management:
SecRule: ModSecurity is rule-based, and SecRule is the directive used to define the conditions under which the server responds to requests. Rules are usually configured with conditions, actions, and the rule's priority.

Example rule:

SecRule REQUEST_URI "@contains evil" "id:1001,phase:1,deny,status:403"
This rule blocks requests that contain "evil" in the URI and returns an HTTP status of 403
______________________________________ _________________________________
ModSecurity: Rules to place in phases:
Phase 1: Request Headers (Pre-Processing)

This phase occurs early in the request processing, before any body or response is sent.
ModSecurity Actions: Rules that need to examine or block based on the HTTP headers (e.g., URI, HTTP method, headers).
Phase 2: Request Body (Processing)

This phase handles the body of the request (e.g., POST data or uploaded files).
ModSecurity Actions: Rules focused on inspecting request body content for potential attacks such as SQL injection, XSS, or buffer overflows.
Phase 3: Response Headers (Post-Processing)

This phase happens after the request has been processed by the server but before the response is sent back to the client. It's used for response filtering.
ModSecurity Actions: Rules for response headers, such as checking for sensitive information leakage or adding security headers.
Phase 4: Response Body (Post-Processing)

This phase happens after the response body has been sent, and is the last phase. It’s useful for inspecting the server's response, such as looking for reflective XSS or sensitive data in the response.
ModSecurity Actions: Rules focused on inspecting or modifying the response body before it is sent to the client.
_____________________________________ _____________________________
->Base configuration to configure in Apache:
 #=== ModSec Core Rule Set Base Configuration (ids: 900000-900999)
 Include /etc/apache/crs/crs-setup.conf
 
 SecAtion "id:900110,phase;1,pass,nolog,setvar:tx.inbound_anomoly_score_threshold=5000,
setvar:tx.outbound_anomaly_score_threshold=5000"

 -The Core Rule Set works with a scoring mechanism by default
 -For every rule a request violates, there is a score being raised.
 -When all the request rules have passed, the score is compared to the limit. If it hits the limit, the request is blocked.
 -The same thing happens with the responses, where we want to avoid information leaks to the client.

SecAction "id:900000,phase:1,pass,nolog, sevtar:tx.paranoia_level=1"

 -Paranoia Levels:
 1-The rules arequite same and false alarms are rare
 2-This will face more and more false alarms, also called false positives.
 3&4-Aggressivnesss of the rule set with the paranoia level setting are really for advanced users with very high security needs.

 # === ModSec Core Rule Set: Runtime Exclusion Rules(ids:10000-49999)
 # ...
 
 # === ModSecurity Core Rule Set Inclusion
 Include /apache/crs/rules/*.conf

 # === ModSec Core Rule Set: Startup Time Rules Exclusions
 # ...
